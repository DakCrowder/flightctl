// Code generated by MockGen. DO NOT EDIT.
// Source: basic_org_auth.go
//
// Generated by this command:
//
//	mockgen -source=basic_org_auth.go -destination=mock_organization_getter.go -package=authz
//

// Package authz is a generated GoMock package.
package authz

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationGetter is a mock of OrganizationGetter interface.
type MockOrganizationGetter struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationGetterMockRecorder
}

// MockOrganizationGetterMockRecorder is the mock recorder for MockOrganizationGetter.
type MockOrganizationGetterMockRecorder struct {
	mock *MockOrganizationGetter
}

// NewMockOrganizationGetter creates a new mock instance.
func NewMockOrganizationGetter(ctrl *gomock.Controller) *MockOrganizationGetter {
	mock := &MockOrganizationGetter{ctrl: ctrl}
	mock.recorder = &MockOrganizationGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationGetter) EXPECT() *MockOrganizationGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOrganizationGetter) Get(ctx context.Context, orgID uuid.UUID) (*v1alpha1.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, orgID)
	ret0, _ := ret[0].(*v1alpha1.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrganizationGetterMockRecorder) Get(ctx, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrganizationGetter)(nil).Get), ctx, orgID)
}
