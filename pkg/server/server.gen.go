// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	. "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /api/v1/devices)
	DeleteDevices(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/devices)
	ListDevices(w http.ResponseWriter, r *http.Request, params ListDevicesParams)

	// (POST /api/v1/devices)
	CreateDevice(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/devices/{id})
	DeleteDevice(w http.ResponseWriter, r *http.Request, id string)

	// (GET /api/v1/devices/{id})
	ReadDevice(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /api/v1/devices/{id})
	ReplaceDevice(w http.ResponseWriter, r *http.Request, id string)

	// (GET /api/v1/devices/{id}/status)
	ReadDeviceStatus(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /api/v1/devices/{id}/status)
	ReplaceDeviceStatus(w http.ResponseWriter, r *http.Request, id string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (DELETE /api/v1/devices)
func (_ Unimplemented) DeleteDevices(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/devices)
func (_ Unimplemented) ListDevices(w http.ResponseWriter, r *http.Request, params ListDevicesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/devices)
func (_ Unimplemented) CreateDevice(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/devices/{id})
func (_ Unimplemented) DeleteDevice(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/devices/{id})
func (_ Unimplemented) ReadDevice(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/devices/{id})
func (_ Unimplemented) ReplaceDevice(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/devices/{id}/status)
func (_ Unimplemented) ReadDeviceStatus(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/devices/{id}/status)
func (_ Unimplemented) ReplaceDeviceStatus(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteDevices operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDevices(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListDevices operation middleware
func (siw *ServerInterfaceWrapper) ListDevices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDevicesParams

	// ------------- Optional query parameter "continue" -------------

	err = runtime.BindQueryParameter("form", true, false, "continue", r.URL.Query(), &params.Continue)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "continue", Err: err})
		return
	}

	// ------------- Optional query parameter "labelSelector" -------------

	err = runtime.BindQueryParameter("form", true, false, "labelSelector", r.URL.Query(), &params.LabelSelector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "labelSelector", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDevices(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateDevice operation middleware
func (siw *ServerInterfaceWrapper) CreateDevice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDevice(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteDevice operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDevice(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadDevice operation middleware
func (siw *ServerInterfaceWrapper) ReadDevice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadDevice(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceDevice operation middleware
func (siw *ServerInterfaceWrapper) ReplaceDevice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceDevice(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadDeviceStatus operation middleware
func (siw *ServerInterfaceWrapper) ReadDeviceStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadDeviceStatus(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceDeviceStatus operation middleware
func (siw *ServerInterfaceWrapper) ReplaceDeviceStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerTokenScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceDeviceStatus(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/devices", wrapper.DeleteDevices)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/devices", wrapper.ListDevices)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/devices", wrapper.CreateDevice)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/devices/{id}", wrapper.DeleteDevice)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/devices/{id}", wrapper.ReadDevice)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/devices/{id}", wrapper.ReplaceDevice)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/devices/{id}/status", wrapper.ReadDeviceStatus)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/devices/{id}/status", wrapper.ReplaceDeviceStatus)
	})

	return r
}

type DeleteDevicesRequestObject struct {
}

type DeleteDevicesResponseObject interface {
	VisitDeleteDevicesResponse(w http.ResponseWriter) error
}

type DeleteDevices200JSONResponse V1alpha1Status

func (response DeleteDevices200JSONResponse) VisitDeleteDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDevices200ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DeleteDevices200ApplicationyamlResponse) VisitDeleteDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DeleteDevices401Response struct {
}

func (response DeleteDevices401Response) VisitDeleteDevicesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListDevicesRequestObject struct {
	Params ListDevicesParams
}

type ListDevicesResponseObject interface {
	VisitListDevicesResponse(w http.ResponseWriter) error
}

type ListDevices200JSONResponse V1alpha1DeviceList

func (response ListDevices200JSONResponse) VisitListDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDevices200ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ListDevices200ApplicationyamlResponse) VisitListDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ListDevices401Response struct {
}

func (response ListDevices401Response) VisitListDevicesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateDeviceRequestObject struct {
	ContentType string
	Body        io.Reader
}

type CreateDeviceResponseObject interface {
	VisitCreateDeviceResponse(w http.ResponseWriter) error
}

type CreateDevice200JSONResponse V1alpha1Device

func (response CreateDevice200JSONResponse) VisitCreateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateDevice200ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CreateDevice200ApplicationyamlResponse) VisitCreateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreateDevice201JSONResponse V1alpha1Device

func (response CreateDevice201JSONResponse) VisitCreateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDevice201ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response CreateDevice201ApplicationyamlResponse) VisitCreateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(201)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type CreateDevice401Response struct {
}

func (response CreateDevice401Response) VisitCreateDeviceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteDeviceRequestObject struct {
	Id string `json:"id"`
}

type DeleteDeviceResponseObject interface {
	VisitDeleteDeviceResponse(w http.ResponseWriter) error
}

type DeleteDevice200JSONResponse V1alpha1Device

func (response DeleteDevice200JSONResponse) VisitDeleteDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDevice200ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DeleteDevice200ApplicationyamlResponse) VisitDeleteDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DeleteDevice202JSONResponse V1alpha1Device

func (response DeleteDevice202JSONResponse) VisitDeleteDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDevice202ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response DeleteDevice202ApplicationyamlResponse) VisitDeleteDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(202)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type DeleteDevice401Response struct {
}

func (response DeleteDevice401Response) VisitDeleteDeviceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReadDeviceRequestObject struct {
	Id string `json:"id"`
}

type ReadDeviceResponseObject interface {
	VisitReadDeviceResponse(w http.ResponseWriter) error
}

type ReadDevice200JSONResponse V1alpha1Device

func (response ReadDevice200JSONResponse) VisitReadDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadDevice200ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ReadDevice200ApplicationyamlResponse) VisitReadDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ReadDevice401Response struct {
}

func (response ReadDevice401Response) VisitReadDeviceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReplaceDeviceRequestObject struct {
	Id          string `json:"id"`
	ContentType string
	Body        io.Reader
}

type ReplaceDeviceResponseObject interface {
	VisitReplaceDeviceResponse(w http.ResponseWriter) error
}

type ReplaceDevice200JSONResponse V1alpha1Device

func (response ReplaceDevice200JSONResponse) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDevice200ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ReplaceDevice200ApplicationyamlResponse) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ReplaceDevice201JSONResponse V1alpha1Device

func (response ReplaceDevice201JSONResponse) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDevice201ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ReplaceDevice201ApplicationyamlResponse) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(201)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ReplaceDevice401Response struct {
}

func (response ReplaceDevice401Response) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReadDeviceStatusRequestObject struct {
	Id string `json:"id"`
}

type ReadDeviceStatusResponseObject interface {
	VisitReadDeviceStatusResponse(w http.ResponseWriter) error
}

type ReadDeviceStatus200JSONResponse V1alpha1Device

func (response ReadDeviceStatus200JSONResponse) VisitReadDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadDeviceStatus200ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ReadDeviceStatus200ApplicationyamlResponse) VisitReadDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ReadDeviceStatus401Response struct {
}

func (response ReadDeviceStatus401Response) VisitReadDeviceStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ReplaceDeviceStatusRequestObject struct {
	Id          string `json:"id"`
	ContentType string
	Body        io.Reader
}

type ReplaceDeviceStatusResponseObject interface {
	VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error
}

type ReplaceDeviceStatus200JSONResponse V1alpha1Device

func (response ReplaceDeviceStatus200JSONResponse) VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDeviceStatus200ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ReplaceDeviceStatus200ApplicationyamlResponse) VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ReplaceDeviceStatus201JSONResponse V1alpha1Device

func (response ReplaceDeviceStatus201JSONResponse) VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDeviceStatus201ApplicationyamlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ReplaceDeviceStatus201ApplicationyamlResponse) VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/yaml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(201)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ReplaceDeviceStatus401Response struct {
}

func (response ReplaceDeviceStatus401Response) VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (DELETE /api/v1/devices)
	DeleteDevices(ctx context.Context, request DeleteDevicesRequestObject) (DeleteDevicesResponseObject, error)

	// (GET /api/v1/devices)
	ListDevices(ctx context.Context, request ListDevicesRequestObject) (ListDevicesResponseObject, error)

	// (POST /api/v1/devices)
	CreateDevice(ctx context.Context, request CreateDeviceRequestObject) (CreateDeviceResponseObject, error)

	// (DELETE /api/v1/devices/{id})
	DeleteDevice(ctx context.Context, request DeleteDeviceRequestObject) (DeleteDeviceResponseObject, error)

	// (GET /api/v1/devices/{id})
	ReadDevice(ctx context.Context, request ReadDeviceRequestObject) (ReadDeviceResponseObject, error)

	// (PUT /api/v1/devices/{id})
	ReplaceDevice(ctx context.Context, request ReplaceDeviceRequestObject) (ReplaceDeviceResponseObject, error)

	// (GET /api/v1/devices/{id}/status)
	ReadDeviceStatus(ctx context.Context, request ReadDeviceStatusRequestObject) (ReadDeviceStatusResponseObject, error)

	// (PUT /api/v1/devices/{id}/status)
	ReplaceDeviceStatus(ctx context.Context, request ReplaceDeviceStatusRequestObject) (ReplaceDeviceStatusResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteDevices operation middleware
func (sh *strictHandler) DeleteDevices(w http.ResponseWriter, r *http.Request) {
	var request DeleteDevicesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDevices(ctx, request.(DeleteDevicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDevices")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDevicesResponseObject); ok {
		if err := validResponse.VisitDeleteDevicesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListDevices operation middleware
func (sh *strictHandler) ListDevices(w http.ResponseWriter, r *http.Request, params ListDevicesParams) {
	var request ListDevicesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDevices(ctx, request.(ListDevicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDevices")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDevicesResponseObject); ok {
		if err := validResponse.VisitListDevicesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDevice operation middleware
func (sh *strictHandler) CreateDevice(w http.ResponseWriter, r *http.Request) {
	var request CreateDeviceRequestObject

	request.ContentType = r.Header.Get("Content-Type")

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDevice(ctx, request.(CreateDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDevice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDeviceResponseObject); ok {
		if err := validResponse.VisitCreateDeviceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDevice operation middleware
func (sh *strictHandler) DeleteDevice(w http.ResponseWriter, r *http.Request, id string) {
	var request DeleteDeviceRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDevice(ctx, request.(DeleteDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDevice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDeviceResponseObject); ok {
		if err := validResponse.VisitDeleteDeviceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadDevice operation middleware
func (sh *strictHandler) ReadDevice(w http.ResponseWriter, r *http.Request, id string) {
	var request ReadDeviceRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadDevice(ctx, request.(ReadDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadDevice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadDeviceResponseObject); ok {
		if err := validResponse.VisitReadDeviceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceDevice operation middleware
func (sh *strictHandler) ReplaceDevice(w http.ResponseWriter, r *http.Request, id string) {
	var request ReplaceDeviceRequestObject

	request.Id = id
	request.ContentType = r.Header.Get("Content-Type")

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceDevice(ctx, request.(ReplaceDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceDevice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceDeviceResponseObject); ok {
		if err := validResponse.VisitReplaceDeviceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadDeviceStatus operation middleware
func (sh *strictHandler) ReadDeviceStatus(w http.ResponseWriter, r *http.Request, id string) {
	var request ReadDeviceStatusRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadDeviceStatus(ctx, request.(ReadDeviceStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadDeviceStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadDeviceStatusResponseObject); ok {
		if err := validResponse.VisitReadDeviceStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceDeviceStatus operation middleware
func (sh *strictHandler) ReplaceDeviceStatus(w http.ResponseWriter, r *http.Request, id string) {
	var request ReplaceDeviceStatusRequestObject

	request.Id = id
	request.ContentType = r.Header.Get("Content-Type")

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceDeviceStatus(ctx, request.(ReplaceDeviceStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceDeviceStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceDeviceStatusResponseObject); ok {
		if err := validResponse.VisitReplaceDeviceStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
