// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"d5suaAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
