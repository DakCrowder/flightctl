// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8/bmfwEAAP//wom8Zg1lAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
