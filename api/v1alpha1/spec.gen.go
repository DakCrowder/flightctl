// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
