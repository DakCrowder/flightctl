// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
