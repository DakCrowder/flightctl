// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
