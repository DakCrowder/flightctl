// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
