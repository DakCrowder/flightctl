// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//N5vnWvhkAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
