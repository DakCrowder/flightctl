// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"UX2G7mPmT9YG/uH24X8CAAD//5HyRV4whAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
