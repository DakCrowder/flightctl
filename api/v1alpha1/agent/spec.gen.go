// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
