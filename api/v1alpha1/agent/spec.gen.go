// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
