// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
