// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
