// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"e80Z+q+YP1kX+McPj/8XAAD//w8FG+AJdwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
