// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
