// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9fW/jNtL4VyF0B2y3P9lO0u1ia+CHe9Ik2wbdbIK83OGu3ueWlsY2LxKpkpSzbpHv",
	"/oBvEiVRtpzN9g7ooX/UK77McDicN84wv0UJywtGgUoRTX+LRLKCHOufx0WRkQRLwugZXf8Vc/214KwA",
	"Lgnof0HdgNOUqL44u2p0kZsComkkJCd0GT3GUQoi4aRQfaNpdEbXhDOaA5VojTnB8wzQPWxGa5yVgApM",
	"uIgRof+CREKK0lJNg3hJJclhHMVufjZXPaLHx86X2F/JTQGJxjbLLhfR9Offoj9zWETT6E+TmhATS4VJ",
	"gASPcZsGFOeg/t9c1+0KkGpBbIHkChCup/KwdlQJYP1bxCgMwPE8x0vwEL3ibE1S4NHjh8cPO4ghsSzF",
	"re7Rxt+0KewxEoQus8YSEKN6VSmsSaK3AWiZR9OfoysOBdaLitUcXJqf1yWl5tcZ54xHcXRH7yl7oFEc",
	"nbC8yEBCGn1oEyaOPo3UzKM15oqaQoHorMCH2Wn0kOi01Vh1mhyanYYa706Tt5AmocVNmeeYbwYSPMt8",
	"Wot+Yv8IOJOrTRRHp7DkOIU0QOC9idrEtobR28UD3tsnQM9mhwrdxzg6ubq7BsFKnsAFo0Qyvt+5DQ1+",
	"1BMzaqRUl/5VE0oYlZhQgVKQmGQCLRhHjALCooBEuhOdlJwrqSUklvaYE4GOr86RA6+2qikrMizkLcdU",
	"aEi3pE9yqH5ISTgDqUJNVmMhRQvOco2XMKwjGcKUyRVwBXjBeI5lNI1SLGGk5uqKnTjKQQi8DGDxY5lj",
	"ijjgVEtk2w8Rmurdo8uKOnjOSmkxrtAbh4CxuQC+hvQHoMBxeBvU6sc5SJxiicfLqieSKyxb1HjAAgmQ",
	"aI4FpKgsDNhq4YTK169qPAiVsFRyMY44YBECfoy+mnMCi5fI9NA734D5QgxaqdkRBWAbm1YsZ05AVGmB",
	"gcO0IHnU6/mlJBxSdZD1DBUGcYjlKgLU+x/SFG30toisBo1izZRsgW55CTF6izMBMbLn2xdfqj2KI91h",
	"b4HVws7O1frqpm59bsiaBjW7/Lgp9FpqriMUneAcshMsGsL4uCg4Wzsp6H6eAiX6x1tMMtOYJCAEmWfQ",
	"/oeTG1eYC931ZkMT/eNyDTzDRUHo8gYySCTjam//ijOimu+KFFsdp2Sd+3xRZpIUGVw+UND9T7UGOYWE",
	"5TkRgjCt/YbR+4xylmXKTruGX0oQ0lvkiZJwCyUY4IYs1aR79Kko1NujIt01FEwoib4J0k2Rq7ehQ1y/",
	"sSL02wxA9lBbtznaGlJ6hDcffPKbL0M3wbDigiydAedU3jAz8AciA8OVGblt1E/lHDgFCeIGEg5yr8Hn",
	"NCMUngD1RymL0DBNA87o2aeCg6ZMQE1zRhFUHZCR9lpQq+nTMlO6Sak7MZ5RpU1sDyLQx6+R/e/jFI3Q",
	"BaGlBDFFH7/+iHIskxUIdDD69rsxGqEfWck7TUffqKZTvFES4YJRuWr2OBx9c6h6BJsOj7zBfwO4b8/+",
	"ejyjN2VRMK48HWU2YMV5CtWPCuML2xPTDTLe0VcwXo5jPQ2haKVQruaDNfCN/vZSwf04+jhF15gu61EH",
	"ozcfNeEOj9DxhTIf3qDjC9M7/jhF74iQVefD+PDI9hYSYZqiwyO5QrmmoRkz+ThFNxKKGq2JG2OQaY+4",
	"MX5Fcy1vapIorfLGGzKjZ5+wMrEV5dDB6E18+Hp09I3d0qAiNoety0bmO+KgGEkxJ8KoWG0ESXDmGdpN",
	"6w0X5K/Aw3x5fHVu21AKC0It+mvzDVJkmL+yEyvI1p9aIEyR0b1jdKPMJC6QWLEyS5XuWQOXiEPClpT8",
	"Ws2mbT6p7UUJQiJl4nCKM0PSWG9TjjeIg5oXldSbQXcRY3TBuDLrFmyKVlIWYjqZLIkc378RY8LU6c1L",
	"SuRmoqxiTualYslJCmvIJoIsR5gnKyIhkSWHCS7ISCNLtX0/ztM/cStlRXB77glNu7T8idBUnVeMTE/L",
	"IRXJ9AlfAbo+u7lFDoAhq6Ggt681MRUhCF0ANz219axmAZoWjFBrXGZE2/TlPCdS7ZJWQIrOY3SCKWUS",
	"zQGVSuxDOkbnvi3wpUmpqCdGimRhYjqreZf9eKlpdAESa1PVqpltI2rdNty4tWOsZdsyUr2TZJnAQz9k",
	"i5rZOh53NyIVjsa0vJnhgRltKqebnvhOmc+BW+tQuYyKzR5WJFkhzEGDUyw3EIyQmMuAlf2+guL6IOdI",
	"Vf5JeHbP4xm2Z+HYUHvzNIkdYTzMKyiDNrDp/Yd8MWE6uI1a6UCElpRbgyNNflDHcSc/qE7KSDDSW7m1",
	"TsRoZ88PfD2L47c9NNSm906qGluqj5AnXpyi9tYMvRTjLsiySzYONAUOaa++c8quOZ0b5s3bjXT6a2vD",
	"2bpIwbJeVW6bfY1unVL9OWGUQmL9t2qzu+teXl+dnFmFED70qketM7wAQQtOmD2M1Xp+Gp7bNqPz0/0m",
	"bhG1sQgfaD91fXeki9uFFc021oPddqdNJ8apyy5ZJeZLkMNUho/KrR4XjnOYKYctyZunG8UoICELYg22",
	"FISC0FlaDnLF0ia7+97/HQXtIGtPX3mMm2sQDfy2OdfbMPZm3tatCbWiwrnSAZzIze4gjt1U4kZ0t9FK",
	"5GH72IJs5VxXutnv/RvZM1F3JVZfNAVdtZzu3n2mpjCHodISNaBn0RHb1v40NbFlrh2hvS00rO59sBDN",
	"OFd9UXJHhXNr9zoPLYQrEMHWCm6wtUamp9nDsCLYO7KAZJNk8CTVmrnRz8pq7ckt7M9mtNZan8ZhoUn6",
	"WEvawGofxWrB6nbORCDtHjejZ80ve7JZC+s2q7SaG1gE2kOo7ejWYLrLGxf4C5k5phWZprnVWUYVosub",
	"ymrolXF58LLntjGJ7mR9JI7urt/ttjjMvP2McXnzpCN0eTN4CS171C0jeC50yylZguix8VLd1p7LhKiQ",
	"WOGjb19P8cF4PH45lDRNoP2EqoLSe5GrCrLs0nFJUQ4TB008jDSIo5SI+88Zn0POhpoPoRlapFWrqSa1",
	"2A0lbc9tjzoIm8IQsoosGWKbEFb36v1vmNuDfsKJJAnOnnwJH0LUv+PvttbAQ60eQqFmh2Sozb8i88I/",
	"PWKpJZTwlhBq7fl2J9MR55aDr+YgEvK9ghc2UmVJjjnHG/Vv45X2wzXtqLC3EsNhBy9BOuDZQF1sVYCJ",
	"CpmDHYiPqFkbbJqbbAe7ipLvSb9W0kRoAWIjJORpj/NqGpEArhahY9MWpS4f6BD/FZYSOA0GfzK7Jboj",
	"KmzPxmI68SJzneDwKCmRWovF6IHIldJl6v/KkBLlYkE+xeoTRmIFWTYScpMBWmZs7oBp/DV0vMSECuky",
	"PrINyhhOwYDQOOX40zugS7mKpkffvo4jO0U0jf73Zzz69Xj0j4PRd9PZbPTP8Ww2m3394es/hxRTk96h",
	"VDYTeb5iGUkGytE7b4Rhq8deEdmndfxWP8ISNlGFlzpm5QCyY3OsvSOSmahlIkuc1Qk0nys2rNXgh+tq",
	"63jQGegLMwfOAu7G8PaevRUDNRLKpBmILRlK3h5oOppwsIuHKjoG85N88g6VajZbaqss3b3kRoBSGWDO",
	"+3qSE6xmUB73DQAdkj5l2cJkCwFF841hUyOnhudKVe7JkzyqPRVANaahAvY1m7TQ3oc5OwxppOm5dVgH",
	"TFD3r8RVuo+kSnuujLyT0cCqeRKj8MH0yeizX8XGem9qfGuqeazmc0C/mfn0aw2PV1eYpw+Yg77BNZkA",
	"hC6takONO9Xnv+6wOLiswucLZj3DVcdeibThSNWlTlsJ58xew5wxm9BzxR6AQ3q5WDzRjm/g6kHttHmI",
	"BFqbVnqjyUc30NxYQaA9YOM3TnvQCKh62Bt60KqXpGJSliTVVl9JyS8lZBtEUqCSLDZbfVL/2jsszo+9",
	"Hkr1mQSZeXvaDm8q4oSuWr5nTKLz032mqs6gWX8Yz8vqoN64gzoQQPt63CdJtY4uFv3npGP17bj2KHRP",
	"HT/KMcVLk+Cr5YCRiboII8nKVLU8rIC67y5JZQ4oZQ/UWsZKbmlBDGl3x12/G5OwtVOfmsVUvSu98tTx",
	"jzvIlj4pWGVwev57hcb0zymOG4t9mjjuTrFHuLcmWBXrLW7ZKZaK5y9Lebmwv70sy6fI4QaSHohAqw81",
	"OLiV7tls9cUpEffPX8IQ9xxi6+zo02v66/NLxD0qhY2CNpmywMpXDcc+uc543Sg/eOU58Xr65pzbpZiG",
	"0eUdTZ7Sz/9f4DJT1veBMsG6GOX4E8nLHKV2EMJZxh787BdzsS8ZSmwFzhjppbgBtYgSVuqlCOuUP6bO",
	"0trecIFao517vlFulHIhlJM/RnViZvVRIMxhij4Kk+MoQJmoIkYfc/PBpC2qDyvzQSdo6r2owwNf/WX6",
	"8+Houw+zWfr1y7/MZunPIl99CEYHOhnY3Q3sdGlmONr7eY0M1qnZOFNkMxfMW/3v/2Y+/jfz8Q+Y+dg5",
	"UPslQXaHPyEf0mIa0sI9RRk4GyAaXNe63i1shFSCwgshWYmhq3Z7k36wK/7o4HJuqshAKEtSroDbWywj",
	"nVZYoDkARW4Cb8/njGWAqQ3A6dbjnks8LaextAmZPoAHJfu9uYeFf9yI7zeDqn1VXx7k1gzPIfucmulj",
	"53WZmXThX1FkGycTO26GVxzd5Dq7QYNYK+xGBLsZEeZ1NLzT6ftCuGtnHaQM3FcKHib21dnFCGjClK9x",
	"9dPJzZ8OD1BS1w8hYQqIfOYMELUZ8x6ezfwl9tCVN9qwJHogtgzYbisRVSBTeV9KRnuHkIjQaenZd0XV",
	"YVve4wf1dNzvaqAzSZ8EMdJsLzFbicHHOPLYYjcvKb6B1GelIOtsDdN364IhvNjPDcL3R0iDu6vjSJ2E",
	"+d4KYN3fFf7utvarStLHOHpLsuq6uHWgGZXQl1pbZJhQJOGTRF/d3b4dvXmJGNfVva9fVTtkZ3CEXZCs",
	"d4tUvzM1TH3qeuDswWXYSmMfc6XXNJQxuiiFNniAaP00izRys0hhNIsMTrNojE6N96KFcNXJ92n1pyi2",
	"Q7qO62McLTkrizBJ1PJeCKR7xJ73YtHSTozL1KFlDpwk6Py0jRZnTBqsuqYTS2Er6AK4TVNCqu8Y/Z2V",
	"2qI0yJjAVq7svwXOSUYwRyyRODOXrhhlgHXM6FfgzBV5Hbx+9UrvLTZ6IiG5HWDSi0NjXh0dvFQmrSxJ",
	"OhEgl+p/kiT3GzS3vhiqkvjG6HyBlMlaUSw2Ya7mYrQjpNapZGtNMIVeuIyi323Gc8GyUkLlNTvmbBUo",
	"oPdMgpH2mG4QfCJCW/W6q5b5c0DKdHjgREoIR3lKAXzrprEHCvwL8EvIw6+OWlDqhOtSO3JhSeS1koGh",
	"NXFYAAeqHB2GMPqByGaKg1aZEEoyYCWVV9WWuTDDpBNlUH1coY7ZpxfC7Ii9cWmZka4KWR0PNbSOL2iQ",
	"DR1c71o/8/g8Y3NQLDZ1xXNP1ZBr3m2T1lNVnmNwTmORXcOaiN4XGrht1dF+AbVLuRXfTu1HhXwHatwX",
	"PYoHvrfTSuXZjY2tarKMGALcU7bc4WXlAQ9kZop+vL29GsjOiiGvgjy0k38l8/jXaVAOsuS0vp3QqAhY",
	"A/cYepsY2of7eJf7HPNgEzASG5qgLXxpknZCi+eVNXB3/c7I1oTlIBBeSOtbKu2rU1nRuUQJpvYyA9Av",
	"JehQJ8c5SB15KpMVwmKKZtFE8eBEsokLlPxF9/7/uvcQ+djg8Gr7fn+mdhwZgtz7flSHr3syb699jnb8",
	"pYshbdpsoEgRFTi5H2RW9mcW9z4/0EXc3L1uyTIzNoBkKOGgrfZ2UeEgU70yewPpMl92g+0KQ2Ta+sTD",
	"9GmPme1GM46EhjZUqddYIjNwpzZ/uv42AAYq7WEEqXEOTiAKnGyZRTfvnCq88/X0sUehD7tCAHZ0vUkh",
	"1rnQmdVf5iUuLxTboUvdhohALg5qjeYsU1a8IEJC6iW+56WOHK4htjttBbzQI8yahFI33PY1Jz0Qc6CU",
	"yTrT8InhnbqzeaGqk3LWIbbGx77QJCTOiy1RTZP0p+P9D1jYpewRykwhg6fAsu6JHr4PvOWWB7+OkYBf",
	"Si0JbD1947YDOycmQd5jYNVFsinWNNFDdMWKMsNevoU5/WN0DTgdMZptBr4P9tnRvQtcKBztJc49bIS+",
	"kTI3T9ZCwVRfqAhIlQhkfIkp+dVkfCVYwpJx9c+vRMIK81Xot4heOmYOctEwcWVv24KJLspzDO2Sd9uE",
	"pXIwhbvOM99jJYBn+vJiomDNIvvyTt9zB3pU/60iRazAv5TgiKjB2oQil7ViLOUXwrv+q8uA6lvFQe9t",
	"Rte2FP3f8VroMW1YR6rT7/pKaNuiC1KiVXVW1fpb3lyMnOGXVmfWv+INv1HRpf+2apNun89CCp0+Kd9c",
	"pxgHSlXUOU6hyNhmj6KLMNPtUbxyWxlkzoF090H6SJ4vKZH1S1l9sVL3tsKgZG7dWQu95qsB+xX3P7Uk",
	"Zr+XKSqOcGmtBSRbRdJ/a23+s2tt/n1VM/s+XOJ2+TgDLq9tomIrFdKna5fMqzLHdFRlCbZuVLVTreYO",
	"X2+WfSaXy75S1rV0dh5bA/ecJLwGrpz30jz76r05NIcF4xYwocsxeqsFy3R7MtUL8aKZJfUif9HMknqx",
	"etGbJTWbpf+vPzGqAJ4Alb2lzXW7oppZkblv5WS5VB5BiJLGGjWu7BqGVKs09vvGDgonVroZvW1qrKOp",
	"kncyVwNYNwXTtnZ4xt1RBUtYdRb4sDzLXlzqiXu7eBB7+xhUvEU7uamWStRSc0Kx/ZCblzvVz5Oru95r",
	"1fAT0yZzs1c29GR1Ole5b1y/I/1YCevNe20ZRlaMu5LpYeZdz2p2PcS5Da8dUrKHEo+BXdqafx5OXcWN",
	"K4qWbeak6TZFrTshrnqN0SXNNuYBb/21AI7cAdSJE0ZK7a28a7EeUN/+NvaWmTdMiqYK78bTcF5khC7P",
	"lasTzPCqxPoc5AMArYwUPVQR4neQ1FUya5+4bqcNeHSK/b0NrDgkBm9JDv9gLrrrrvjeMSNRWmRXeu5X",
	"xQiVH8mFXbsWjOfH74/de7HH12fHk3eXJ8e355fvY/SwAg76YzOlVrkXhOqEBI5YApia5FM3srqD1enG",
	"mEuSlBnmSBAJ2kYi9mlzzAHH5rFU88gpOtbXs3jyHh7++XfG72N0VqqTMLnCnDi2LinO52RZslKgb0bJ",
	"CnOc6EsPt9bWzTj6ahb9cHE7i2I0i+5uT2bRyyC73XUqLNrVQHWqr31410T6cSlZjiVJQoUjUgnqpa1q",
	"M3EVjSkrQ9k/Ox8Maz0WbNIyufyB4wT8FPOtksz1U4fYY6ZtYyqm62TUhS7BH3XFqykC0d5oohcGOSZZ",
	"NI0k4Px/FhlZrmQiszFhkQvjaDnxVregE0YlZxm6BZxHcVRyNdTl2jZGd4JRPzen+PBVaNhLV85lss90",
	"rj8kGVbEWYMpCoLcJt4sMgCp07ggXbqQuwlxyRUQjh4Yv1d2uxjPTN1kAlRAHf+IjgucrAAdjQ86i3l4",
	"eBhj3TxmfDmxY8Xk3fnJ2fubs9HR+GC8knlmNkwq5oxaRDq+Oo/iaO08xGh9iLNihQ9tJRfFBYmm0Tfj",
	"g/GhvWnWDDfBBZmsDyd2PZPfFLKPE2fq6zwFCOQu/QCy4WrG7ciD53o2VZ6LQDTUna3yYvQ8NZMHIiMK",
	"a3dlqa2D7QG/FhSla5YtpHuR1HpRTWqzPewOVq+AOu6XvITY/gGhQIi0W7xSVWrrshnU8qgqsPrOtYar",
	"O1+3vK9tcD9o175giolU+9HBQSsTzYvhTP5l/zBEPd+Q8I3/QO5j5wBe/qQY7+jgVeBxV+au41WXVweH",
	"z4aaSfcLYHNHcSlXOrqcGqCvvjzQ90y+ZSW1AL/78gDdX+Shi4y4vwuFl9pbMYwefVDfeo58nd1flIED",
	"f2dr8VoZrTvP8jUUmVJNfjLx55/kuo7uOY7pB9MZhPyemYePn2Wj7EPsj02NqZB5/ILn04caOpOvnhFW",
	"Lyt+j1PkKrb+IId8x2mrE9ddmZE+aixU0nZiMjIwRaHitr6TZkZ1K+a+DHN34Qzi88MvjUCIkukfjO+/",
	"+fJA3zI+J2kK9N+m3eLo299joTfGO7ijeI1JhueumN4e9c6x3nXqrbrdaljvefCvAaehY7+Xku0HaC3n",
	"Z1W2X0j3DZIJTg3+QY7m72zp/sceSn2poYuD9WkwDvgk0n8w1Izr5GS5U6b/4kLLCtVBQHsGrL7vunvN",
	"GfqPmD9ZF/nHD4//FwAA//9lhJI0tHYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
