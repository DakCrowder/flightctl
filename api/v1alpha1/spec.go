// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//CSPz9IUxAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
